#!/bin/bash

# DataLink Client - File upload/download tool
# Usage: 
#   dtlk up <file/directory> [additional files/directories...]
#   dtlk down <8-digit-id> [download-directory]

set -e

progress_pid=""
compress_pid=""
extract_pid=""
temp_archive=""
temp_file=""
temp_extract_dir=""

cleanup() {
    print_info "Cancelling operation..."
    
    [ -n "$progress_pid" ] && kill "$progress_pid" 2>/dev/null || true
    [ -n "$compress_pid" ] && kill "$compress_pid" 2>/dev/null || true
    [ -n "$extract_pid" ] && kill "$extract_pid" 2>/dev/null || true
    
    [ -n "$temp_archive" ] && [ -f "$temp_archive" ] && rm -f "$temp_archive"
    [ -n "$temp_file" ] && [ -f "$temp_file" ] && rm -f "$temp_file"
    [ -n "$temp_extract_dir" ] && [ -d "$temp_extract_dir" ] && rm -rf "$temp_extract_dir"
    
    rm -f /tmp/dtlk_compress_progress_* 2>/dev/null || true
    rm -f /tmp/dtlk_http_code 2>/dev/null || true
    rm -f /tmp/dtlk_renamed_*.txt 2>/dev/null || true
    
    echo
    print_error "Operation cancelled"
    exit 1
}

trap cleanup INT TERM

SERVER_URL="https://datalink.ga111o.com"
SCRIPT_NAME="dtlk"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}$1${NC}"
}

print_info() {
    echo -e "${YELLOW}$1${NC}"
}

print_progress() {
    echo -e "${BLUE}$1${NC}"
}

calculate_size() {
    local total_size=0
    for item in "$@"; do
        if [ -f "$item" ]; then
            total_size=$((total_size + $(stat -c%s "$item" 2>/dev/null || echo 0)))
        elif [ -d "$item" ]; then
            total_size=$((total_size + $(du -sb "$item" 2>/dev/null | cut -f1 || echo 0)))
        fi
    done
    echo "$total_size"
}

format_bytes() {
    local bytes="$1"
    local units=("B" "KB" "MB" "GB")
    local unit_index=0
    
    while [ "$bytes" -ge 1024 ] && [ "$unit_index" -lt 4 ]; do
        bytes=$((bytes / 1024))
        unit_index=$((unit_index + 1))
    done
    
    echo "${bytes}${units[$unit_index]}"
}

show_progress() {
    local current="$1"
    local total="$2"
    local operation="$3"
    
    if [ "$total" -eq 0 ]; then
        return
    fi
    
    local percentage=$((current * 100 / total))
    local bar_length=30
    local filled_length=$((percentage * bar_length / 100))
    local empty_length=$((bar_length - filled_length))
    
    local bar=""
    for ((i=0; i<filled_length; i++)); do
        bar="${bar}█"
    done
    for ((i=0; i<empty_length; i++)); do
        bar="${bar}░"
    done
    
    local current_formatted=$(format_bytes "$current")
    local total_formatted=$(format_bytes "$total")
    
    echo -ne "\r${operation}: [${bar}] ${percentage}% (${current_formatted}/${total_formatted})"
}

check_dependencies() {
    local missing_tools=()
    
    command -v curl >/dev/null 2>&1 || missing_tools+=("curl")
    command -v tar >/dev/null 2>&1 || missing_tools+=("tar")
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        print_error "Missing required tools: ${missing_tools[*]}"
        echo "Please install the missing tools and try again."
        exit 1
    fi
}


upload_files() {
    local files=("$@")
    
    if [ ${#files[@]} -eq 0 ]; then
        print_error "No files or directories specified for upload"
        echo "Usage: $SCRIPT_NAME up <file/directory> [additional files/directories...]"
        exit 1
    fi
    
    for file in "${files[@]}"; do
        if [ ! -e "$file" ]; then
            print_error "File or directory does not exist: $file"
            exit 1
        fi
    done
    
    local total_size=$(calculate_size "${files[@]}")
    print_info "Total size to upload: $(format_bytes "$total_size")"
    echo
    
    local timestamp=$(date +%s)
    temp_archive="/tmp/dtlk_upload_${timestamp}.tar.gz"
    
    print_info "Compressing files..."
    
    (
        tar -czf "$temp_archive" "${files[@]}" 2>/dev/null &
        local tar_pid=$!
        compress_pid=$tar_pid
        
        local last_size=0
        local stall_count=0
        
        while kill -0 "$tar_pid" 2>/dev/null; do
            if [ -f "$temp_archive" ]; then
                local current_size=$(stat -c%s "$temp_archive" 2>/dev/null || echo 0)
                
                local estimated_final_size=$((total_size * 40 / 100))
                if [ "$current_size" -gt "$estimated_final_size" ]; then
                    estimated_final_size=$current_size
                fi
                
                show_progress "$current_size" "$estimated_final_size" "Compress"
                
                if [ "$current_size" -eq "$last_size" ]; then
                    stall_count=$((stall_count + 1))
                else
                    stall_count=0
                fi
                last_size=$current_size
            fi
            sleep 0.2
        done
        
        wait "$tar_pid"
        local tar_exit_code=$?
        
        if [ "$tar_exit_code" -eq 0 ] && [ -f "$temp_archive" ]; then
            local final_size=$(stat -c%s "$temp_archive" 2>/dev/null || echo 0)
            show_progress "$final_size" "$final_size" "Compress"
        fi
        
        return $tar_exit_code
    ) &
    
    local compress_process_pid=$!
    
    if ! wait "$compress_process_pid"; then
        print_error "Failed to create archive"
        exit 1
    fi
    
    echo
    
    if [ ! -f "$temp_archive" ]; then
        print_error "Archive file was not created"
        exit 1
    fi
    
    local archive_size=$(stat -c%s "$temp_archive" 2>/dev/null || echo 0)
    if [ "$archive_size" -eq 0 ]; then
        print_error "Archive file is empty"
        rm -f "$temp_archive"
        exit 1
    fi
    
    print_info "Archive size: $(format_bytes "$archive_size")"
    echo
    
    print_info "Uploading to server..."
    
    local response_file="/tmp/dtlk_response_${timestamp}"
    local upload_log="/tmp/dtlk_upload_${timestamp}.log"
    
    echo
    echo -n "Upload  : [░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 0% (0B/$(format_bytes "$archive_size"))"
    
    curl -X POST "$SERVER_URL/upload" \
        -F "file=@$temp_archive" \
        -w "%{http_code}" \
        -o "$response_file" \
        --silent 2>"$upload_log" &
    
    local curl_pid=$!
    local progress=0
    local last_update=$(date +%s)
    
    while kill -0 "$curl_pid" 2>/dev/null; do
        local current_time=$(date +%s)
        local elapsed=$((current_time - last_update))
        
        if [ "$elapsed" -ge 1 ] && [ "$progress" -lt 95 ]; then
            progress=$((progress + 2))
            local current_bytes=$((archive_size * progress / 100))
            
            local bar_length=30
            local filled_length=$((progress * bar_length / 100))
            local empty_length=$((bar_length - filled_length))
            
            local bar=""
            for ((i=0; i<filled_length; i++)); do bar="${bar}█"; done
            for ((i=0; i<empty_length; i++)); do bar="${bar}░"; done
            
            echo -ne "\rUpload  : [${bar}] ${progress}% ($(format_bytes "$current_bytes")/$(format_bytes "$archive_size"))"
            
            last_update=$current_time
        fi
        sleep 0.3
    done
    
    wait "$curl_pid"
    local curl_exit_code=$?
    
    echo -ne "\rUpload  : [██████████████████████████████] 100% ($(format_bytes "$archive_size")/$(format_bytes "$archive_size"))"
    echo
    
    rm -f "$upload_log"
    
    if [ "$curl_exit_code" -ne 0 ]; then
        rm -f "$temp_archive" "$response_file"
        print_error "Failed to connect to server at $SERVER_URL"
        exit 1
    fi
    
    echo
    
    local response_content=$(cat "/tmp/dtlk_response_${timestamp}" 2>/dev/null || echo "")
    local http_code=$(tail -c 4 "/tmp/dtlk_response_${timestamp}" 2>/dev/null || echo "000")
    
    rm -f "$temp_archive" "/tmp/dtlk_response_${timestamp}" "$upload_log"
    
    if ! echo "$response_content" | grep -q '"message":"File uploaded successfully"'; then
        print_error "Upload failed (HTTP $http_code). Server response: $response_content"
        exit 1
    fi
    
    local file_id
    file_id=$(echo "$response_content" | grep -o '"id":"[0-9]*"' | grep -o '[0-9]*' | head -1)
    
    if [ -z "$file_id" ]; then
        print_error "Upload failed. Server response: $response_content"
        exit 1
    fi
    
    local formatted_id=$(printf "%08d" "$file_id")
    
    print_success "Upload successful!"
    echo
    echo "File ID: $formatted_id"
    echo
    print_info "Use 'dtlk down $formatted_id' to download"
}

get_unique_name() {
    local base_name="$1"
    local counter=1
    local new_name="$base_name"
    
    while [ -e "$new_name" ]; do
        if [ -d "$base_name" ]; then
            new_name="${base_name}_dups${counter}"
        else
            local name_without_ext="${base_name%.*}"
            local extension="${base_name##*.}"
            if [ "$name_without_ext" != "$base_name" ]; then
                new_name="${name_without_ext}_dups${counter}.${extension}"
            else
                new_name="${base_name}_dups${counter}"
            fi
        fi
        ((counter++))
    done
    
    echo "$new_name"
}

handle_duplicates() {
    local target_dir="$1"
    local temp_extract_dir="$2"
    local renamed_file="/tmp/dtlk_renamed_$(date +%s).txt"
    
    shopt -s dotglob
    
    for item in "$temp_extract_dir"/*; do
        [ ! -e "$item" ] && continue
        
        local item_name=$(basename "$item")
        [ "$item_name" = "." ] || [ "$item_name" = ".." ] && continue
        
        local target_path="$target_dir/$item_name"
        
        if [ -e "$target_path" ]; then
            local unique_name=$(get_unique_name "$target_path")
            local unique_basename=$(basename "$unique_name")
            
            print_info "File/directory '$item_name' already exists, renaming to '$unique_basename'"
            
            if ! mv "$item" "$unique_name"; then
                print_error "Failed to move $item to $unique_name"
                rm -f "$renamed_file"
                shopt -u dotglob
                return 1
            fi
            
            echo "$unique_basename" >> "$renamed_file"
        else
            if ! mv "$item" "$target_path"; then
                print_error "Failed to move $item to $target_path"
                rm -f "$renamed_file"
                shopt -u dotglob
                return 1
            fi
        fi
    done
    
    shopt -u dotglob
    
    if [ -f "$renamed_file" ] && [ -s "$renamed_file" ]; then
        echo
        print_info "Some files were renamed to avoid conflicts:"
        while IFS= read -r renamed_item; do
            echo "  → $renamed_item"
        done < "$renamed_file"
    fi
    
    rm -f "$renamed_file"
}

download_file() {
    local file_id="$1"
    local download_dir="${2:-.}"
    
    if [ -z "$file_id" ]; then
        print_error "No file ID specified"
        echo "Usage: $SCRIPT_NAME down <8-digit-id> [download-directory]"
        exit 1
    fi
    
    file_id=$(echo "$file_id" | sed 's/^0*//')
    if [ -z "$file_id" ]; then
        file_id="0"
    fi
    
    if ! [[ "$file_id" =~ ^[0-9]+$ ]]; then
        print_error "Invalid file ID: must be numeric"
        exit 1
    fi
    
    if [ "$download_dir" != "." ] && [ ! -d "$download_dir" ]; then
        print_info "Creating download directory: $download_dir"
        mkdir -p "$download_dir"
    fi
    
    local original_dir=$(pwd)
    cd "$download_dir"
    local abs_download_dir=$(pwd)
    cd "$original_dir"
    
    print_info "Downloading file..."
    temp_file="/tmp/dtlk_download_$(date +%s).tar.gz"
    
    local file_size=0
    local head_response=$(curl -s -I "$SERVER_URL/download/$file_id" 2>/dev/null)
    if [ $? -eq 0 ]; then
        file_size=$(echo "$head_response" | grep -i "content-length:" | sed 's/.*: *//' | tr -d '\r\n')
        if [ -n "$file_size" ] && [ "$file_size" -gt 0 ]; then
            print_info "File size: $(format_bytes "$file_size")"
            echo
        fi
    fi
    
    progress_pid=""
    if [ "$file_size" -gt 0 ]; then
        (
            while [ -f "$temp_file" ]; do
                local current_size=$(stat -c%s "$temp_file" 2>/dev/null || echo 0)
                show_progress "$current_size" "$file_size" "Download"
                sleep 0.5
            done
        ) &
        progress_pid=$!
    fi
    
    if ! curl -# -X GET "$SERVER_URL/download/$file_id" -o "$temp_file" -w "%{http_code}" > /tmp/dtlk_http_code 2>/dev/null; then
        rm -f "$temp_file"
        [ -n "$progress_pid" ] && kill "$progress_pid" 2>/dev/null || true
        print_error "Failed to connect to server at $SERVER_URL"
        exit 1
    fi
    
    [ -n "$progress_pid" ] && kill "$progress_pid" 2>/dev/null || true
    echo
    
    local http_code=$(cat /tmp/dtlk_http_code)
    rm -f /tmp/dtlk_http_code
    
    if [ "$http_code" != "200" ]; then
        rm -f "$temp_file"
        if [ "$http_code" == "404" ]; then
            print_error "File not found (ID: $file_id)"
        else
            print_error "Download failed (HTTP $http_code)"
        fi
        exit 1
    fi
    
    if [ ! -f "$temp_file" ] || [ ! -s "$temp_file" ]; then
        rm -f "$temp_file"
        print_error "Download failed: no data received"
        exit 1
    fi
    
    local downloaded_size=$(stat -c%s "$temp_file" 2>/dev/null || echo 0)
    print_info "Downloaded: $(format_bytes "$downloaded_size")"
    echo
    
    temp_extract_dir="/tmp/dtlk_extract_$(date +%s)"
    mkdir -p "$temp_extract_dir"
    
    print_info "Extracting files..."
    
    if ! tar -xzf "$temp_file" -C "$temp_extract_dir" 2>/dev/null; then
        rm -f "$temp_file"
        rm -rf "$temp_extract_dir"
        print_error "Failed to extract downloaded file"
        exit 1
    fi
    
    local extracted_size=$(du -sb "$temp_extract_dir" 2>/dev/null | cut -f1 || echo 0)
    print_success "Extraction completed! ($(format_bytes "$extracted_size") extracted)"
    echo
    
    rm -f "$temp_file"
    
    if ! handle_duplicates "$abs_download_dir" "$temp_extract_dir"; then
        rm -rf "$temp_extract_dir"
        print_error "Failed to handle file conflicts"
        exit 1
    fi
    
    rm -rf "$temp_extract_dir"
    
    print_success "Download and extraction completed!"
    if [ "$download_dir" != "." ]; then
        print_info "Files extracted to: $download_dir"
    else
        print_info "Files extracted to current directory"
    fi
}

show_usage() {
    echo "DataLink Client - File upload/download tool"
    echo
    echo "Usage:"
    echo "  $SCRIPT_NAME up <file/directory> [additional files/directories...]"
    echo "  $SCRIPT_NAME down <8-digit-id> [download-directory]"
    echo
    echo "Examples:"
    echo "  $SCRIPT_NAME up myfile.txt"
    echo "  $SCRIPT_NAME up folder1/ file.txt folder2/"
    echo "  $SCRIPT_NAME down 12345678"
    echo "  $SCRIPT_NAME down 12345678 ./downloads/"
    echo
    echo "Server URL: $SERVER_URL"
}

main() {
    if [ $# -eq 0 ]; then
        show_usage
        exit 1
    fi
    
    check_dependencies
    
    case "$1" in
        "up")
            shift
            upload_files "$@"
            ;;
        "down")
            shift
            download_file "$@"
            ;;
        "-h"|"--help"|"help")
            show_usage
            ;;
        *)
            print_error "Unknown command: $1"
            echo
            show_usage
            exit 1
            ;;
    esac
}

main "$@" 